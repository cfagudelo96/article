syntax = "proto3";

package restaurant.v1;

import "api/v1/api.proto";
import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Restaurants";
    version: "1.0";
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "default";
    value: {
      description: "Error";
      schema: {
        json_schema: {ref: ".api.v1.ErrorResponse"}
      }
    }
  }
};

service RestaurantService {
  rpc CreateRestaurant(CreateRestaurantRequest) returns (CreateRestaurantResponse) {
    option (google.api.http) = {
      post: "/api/v1/restaurants"
      body: "*"
      response_body: "restaurant"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a restaurant"
      description: "Creates a new restaurant in the system."
      tags: "Restaurants"
    };
  }
}

message CreateRestaurantRequest {
  string name = 1 [
    (buf.validate.field).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  WeeklySchedule weekly_schedule = 2 [(buf.validate.field).required = true];
}

message CreateRestaurantResponse {
  Restaurant restaurant = 1;
}

message Restaurant {
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  string name = 2;
  WeeklySchedule weekly_schedule = 3;
  google.protobuf.Timestamp created_at = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  google.protobuf.Timestamp updated_at = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message WeeklySchedule {
  Schedule monday = 1;
  Schedule tuesday = 2;
  Schedule wednesday = 3;
  Schedule thursday = 4;
  Schedule friday = 5;
  Schedule saturday = 6;
  Schedule sunday = 7;

  option (buf.validate.message).cel = {
    id: "weekly_schedule.at_least_one_defined",
    message: "At least one day must have its schedule defined",
    expression: "has(this.monday) || has(this.tuesday) || has(this.wednesday) || has(this.thursday) || has(this.friday) || has(this.saturday) || has(this.sunday)"
  };
}

message Schedule {
  api.v1.Time opens_at = 2;
  api.v1.Time closes_at = 3;

  option (buf.validate.message).cel = {
    id: "schedule.closes_at_after",
    message: "The time for closes_at must be after opens_at",
    expression: "this.closes_at.hour > this.opens_at.hour || (this.closes_at.hour == this.opens_at.hour && this.closes_at.minute > this.opens_at.minute)"
  };
}

message NotFoundError {}
